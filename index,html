<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chemistry In The World</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Kanit', sans-serif;
            background: linear-gradient(135deg, #ffeef8 0%, #e8f4fd 50%, #f0f8e8 100%);
            min-height: 100vh;
        }
        
        .element-card {
            transition: all 0.3s ease;
            cursor: grab;
        }
        
        .element-card:active {
            cursor: grabbing;
        }
        
        .element-card.dragging {
            transform: scale(1.1);
            z-index: 1000;
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
        }
        
        .drop-zone {
            transition: all 0.3s ease;
            border: 2px dashed transparent;
        }
        
        .drop-zone.drag-over {
            border-color: #10b981;
            background-color: rgba(16, 185, 129, 0.1);
            transform: scale(1.05);
        }
        
        .drop-zone.correct {
            background: linear-gradient(135deg, #d1fae5, #a7f3d0);
            border-color: #10b981;
        }
        
        .drop-zone.incorrect {
            background: linear-gradient(135deg, #fee2e2, #fecaca);
            border-color: #ef4444;
        }
        
        .floating-animation {
            animation: float 3s ease-in-out infinite;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .bounce-in {
            animation: bounceIn 0.6s ease-out;
        }
        
        @keyframes bounceIn {
            0% { transform: scale(0.3); opacity: 0; }
            50% { transform: scale(1.05); }
            70% { transform: scale(0.9); }
            100% { transform: scale(1); opacity: 1; }
        }
        
        .pulse-correct {
            animation: pulseCorrect 0.6s ease-out;
        }
        
        @keyframes pulseCorrect {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); background-color: #10b981; }
            100% { transform: scale(1); }
        }
    </style>
</head>
<body class="overflow-x-hidden">
    <div id="app" class="min-h-screen">
        <!-- ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å -->
        <div id="home-page" class="flex flex-col items-center justify-center min-h-screen p-6">
            <div class="text-center mb-12 floating-animation">
                <h1 class="text-5xl md:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 via-pink-500 to-blue-500 mb-4">
                    Chemistry In The World
                </h1>
                <p class="text-xl text-gray-600 mb-2">‡πÄ‡∏Å‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ò‡∏≤‡∏ï‡∏∏‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏≤‡∏ï‡∏∏</p>
                <div class="text-4xl mb-8">üß™‚öóÔ∏èüî¨</div>
            </div>
            
            <div class="flex flex-col md:flex-row gap-6">
                <button onclick="showLearnPage()" class="bg-gradient-to-r from-blue-400 to-purple-500 hover:from-blue-500 hover:to-purple-600 text-white px-8 py-4 rounded-2xl text-xl font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300">
                    üìö ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ò‡∏≤‡∏ï‡∏∏
                </button>
                <button onclick="showGamePage()" class="bg-gradient-to-r from-green-400 to-blue-500 hover:from-green-500 hover:to-blue-600 text-white px-8 py-4 rounded-2xl text-xl font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300">
                    üéÆ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô
                </button>
            </div>
        </div>

        <!-- ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ò‡∏≤‡∏ï‡∏∏ -->
        <div id="learn-page" class="hidden min-h-screen p-6">
            <div class="max-w-6xl mx-auto">
                <div class="flex items-center justify-between mb-8">
                    <h2 class="text-4xl font-bold text-gray-800">üìö ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ò‡∏≤‡∏ï‡∏∏</h2>
                    <button onclick="showHomePage()" class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-300">
                        üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
                    </button>
                </div>
                
                <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6" id="learn-elements">
                    <!-- Elements will be populated by JavaScript -->
                </div>
            </div>
        </div>

        <!-- ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° -->
        <div id="game-page" class="hidden min-h-screen p-6">
            <div class="max-w-7xl mx-auto">
                <div class="flex flex-col md:flex-row items-center justify-between mb-8">
                    <h2 class="text-4xl font-bold text-gray-800 mb-4 md:mb-0">üéÆ ‡πÄ‡∏Å‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ò‡∏≤‡∏ï‡∏∏</h2>
                    <div class="flex items-center gap-4">
                        <div class="bg-white rounded-xl px-6 py-3 shadow-lg">
                            <span class="text-2xl font-bold text-purple-600">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: <span id="score">0</span></span>
                        </div>
                        <button onclick="checkAnswers()" class="bg-gradient-to-r from-orange-400 to-red-500 hover:from-orange-500 hover:to-red-600 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-300">
                            ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                        </button>
                        <button onclick="resetGame()" class="bg-gradient-to-r from-gray-400 to-gray-500 hover:from-gray-500 hover:to-gray-600 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-300">
                            üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                        </button>
                        <button onclick="showHomePage()" class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-300">
                            üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
                        </button>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <!-- ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ò‡∏≤‡∏ï‡∏∏ -->
                    <div class="bg-white rounded-2xl p-6 shadow-xl">
                        <h3 class="text-2xl font-bold text-center mb-6 text-purple-600">üß™ ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ò‡∏≤‡∏ï‡∏∏</h3>
                        <div class="grid grid-cols-2 md:grid-cols-3 gap-4" id="element-symbols">
                            <!-- Element symbols will be populated by JavaScript -->
                        </div>
                    </div>
                    
                    <!-- ‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏≤‡∏ï‡∏∏ -->
                    <div class="bg-white rounded-2xl p-6 shadow-xl">
                        <h3 class="text-2xl font-bold text-center mb-6 text-green-600">üìù ‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏≤‡∏ï‡∏∏</h3>
                        <div class="grid grid-cols-2 gap-4" id="element-names">
                            <!-- Element names will be populated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏≤‡∏ï‡∏∏ 30 ‡∏ä‡∏ô‡∏¥‡∏î
        const elements = [
            { symbol: 'H', name: '‡πÑ‡∏Æ‡πÇ‡∏î‡∏£‡πÄ‡∏à‡∏ô', color: 'from-red-300 to-red-400' },
            { symbol: 'He', name: '‡∏Æ‡∏µ‡πÄ‡∏•‡∏µ‡∏¢‡∏°', color: 'from-yellow-300 to-yellow-400' },
            { symbol: 'Li', name: '‡∏•‡∏¥‡πÄ‡∏ó‡∏µ‡∏¢‡∏°', color: 'from-green-300 to-green-400' },
            { symbol: 'Be', name: '‡πÄ‡∏ö‡∏£‡∏¥‡∏•‡πÄ‡∏•‡∏µ‡∏¢‡∏°', color: 'from-blue-300 to-blue-400' },
            { symbol: 'B', name: '‡πÇ‡∏ö‡∏£‡∏≠‡∏ô', color: 'from-purple-300 to-purple-400' },
            { symbol: 'C', name: '‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô', color: 'from-pink-300 to-pink-400' },
            { symbol: 'N', name: '‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô', color: 'from-indigo-300 to-indigo-400' },
            { symbol: 'O', name: '‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô', color: 'from-teal-300 to-teal-400' },
            { symbol: 'F', name: '‡∏ü‡∏•‡∏π‡∏≠‡∏≠‡∏£‡∏µ‡∏ô', color: 'from-orange-300 to-orange-400' },
            { symbol: 'Ne', name: '‡∏ô‡∏µ‡∏≠‡∏≠‡∏ô', color: 'from-cyan-300 to-cyan-400' },
            { symbol: 'Na', name: '‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°', color: 'from-red-400 to-red-500' },
            { symbol: 'Mg', name: '‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏°', color: 'from-yellow-400 to-yellow-500' },
            { symbol: 'Al', name: '‡∏≠‡∏∞‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°', color: 'from-green-400 to-green-500' },
            { symbol: 'Si', name: '‡∏ã‡∏¥‡∏•‡∏¥‡∏Ñ‡∏≠‡∏ô', color: 'from-blue-400 to-blue-500' },
            { symbol: 'P', name: '‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™', color: 'from-purple-400 to-purple-500' },
            { symbol: 'S', name: '‡∏Å‡∏≥‡∏°‡∏∞‡∏ñ‡∏±‡∏ô', color: 'from-pink-400 to-pink-500' },
            { symbol: 'Cl', name: '‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏ô', color: 'from-indigo-400 to-indigo-500' },
            { symbol: 'Ar', name: '‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏≠‡∏ô', color: 'from-teal-400 to-teal-500' },
            { symbol: 'K', name: '‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°', color: 'from-orange-400 to-orange-500' },
            { symbol: 'Ca', name: '‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°', color: 'from-cyan-400 to-cyan-500' },
            { symbol: 'Fe', name: '‡πÄ‡∏´‡∏•‡πá‡∏Å', color: 'from-gray-400 to-gray-500' },
            { symbol: 'Cu', name: '‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á', color: 'from-amber-400 to-amber-500' },
            { symbol: 'Zn', name: '‡∏™‡∏±‡∏á‡∏Å‡∏∞‡∏™‡∏µ', color: 'from-slate-400 to-slate-500' },
            { symbol: 'Ag', name: '‡πÄ‡∏á‡∏¥‡∏ô', color: 'from-stone-300 to-stone-400' },
            { symbol: 'Au', name: '‡∏ó‡∏≠‡∏á', color: 'from-yellow-500 to-yellow-600' },
            { symbol: 'Hg', name: '‡∏õ‡∏£‡∏≠‡∏ó', color: 'from-gray-500 to-gray-600' },
            { symbol: 'Pb', name: '‡∏ï‡∏∞‡∏Å‡∏±‡πà‡∏ß', color: 'from-zinc-400 to-zinc-500' },
            { symbol: 'I', name: '‡πÑ‡∏≠‡πÇ‡∏≠‡∏î‡∏µ‡∏ô', color: 'from-violet-400 to-violet-500' },
            { symbol: 'Xe', name: '‡∏ã‡∏µ‡∏ô‡∏≠‡∏ô', color: 'from-emerald-400 to-emerald-500' },
            { symbol: 'U', name: '‡∏¢‡∏π‡πÄ‡∏£‡πÄ‡∏ô‡∏µ‡∏¢‡∏°', color: 'from-lime-400 to-lime-500' }
        ];

        let currentScore = 0;
        let draggedElement = null;
        let gameAnswers = {};
        let isChecked = false;

        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
        function showHomePage() {
            document.getElementById('home-page').classList.remove('hidden');
            document.getElementById('learn-page').classList.add('hidden');
            document.getElementById('game-page').classList.add('hidden');
        }

        function showLearnPage() {
            document.getElementById('home-page').classList.add('hidden');
            document.getElementById('learn-page').classList.remove('hidden');
            document.getElementById('game-page').classList.add('hidden');
            populateLearnPage();
        }

        function showGamePage() {
            document.getElementById('home-page').classList.add('hidden');
            document.getElementById('learn-page').classList.add('hidden');
            document.getElementById('game-page').classList.remove('hidden');
            initializeGame();
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        function populateLearnPage() {
            const container = document.getElementById('learn-elements');
            container.innerHTML = '';
            
            elements.forEach((element, index) => {
                const elementCard = document.createElement('div');
                elementCard.className = `bg-gradient-to-br ${element.color} rounded-2xl p-6 text-center shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 bounce-in`;
                elementCard.style.animationDelay = `${index * 0.1}s`;
                elementCard.innerHTML = `
                    <div class="text-4xl font-bold text-white mb-2">${element.symbol}</div>
                    <div class="text-lg font-semibold text-white">${element.name}</div>
                `;
                container.appendChild(elementCard);
            });
        }

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Å‡∏°
        function initializeGame() {
            currentScore = 0;
            gameAnswers = {};
            isChecked = false;
            updateScore();
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ò‡∏≤‡∏ï‡∏∏ (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 30 ‡∏ò‡∏≤‡∏ï‡∏∏)
            const symbolsContainer = document.getElementById('element-symbols');
            symbolsContainer.innerHTML = '';
            
            // ‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
            const shuffledElements = [...elements].sort(() => Math.random() - 0.5);
            
            shuffledElements.forEach((element, index) => {
                const symbolCard = document.createElement('div');
                symbolCard.className = `element-card bg-gradient-to-br ${element.color} rounded-xl p-4 text-center shadow-lg cursor-grab bounce-in`;
                symbolCard.style.animationDelay = `${index * 0.1}s`;
                symbolCard.draggable = true;
                symbolCard.dataset.symbol = element.symbol;
                symbolCard.innerHTML = `
                    <div class="text-3xl font-bold text-white">${element.symbol}</div>
                `;
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö drag
                symbolCard.addEventListener('dragstart', handleDragStart);
                symbolCard.addEventListener('dragend', handleDragEnd);
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° touch events ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
                symbolCard.addEventListener('touchstart', handleTouchStart, { passive: false });
                symbolCard.addEventListener('touchmove', handleTouchMove, { passive: false });
                symbolCard.addEventListener('touchend', handleTouchEnd, { passive: false });
                
                symbolsContainer.appendChild(symbolCard);
            });
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏≤‡∏ï‡∏∏ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 14 ‡∏ò‡∏≤‡∏ï‡∏∏)
            const namesContainer = document.getElementById('element-names');
            namesContainer.innerHTML = '';
            
            // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 14 ‡∏ò‡∏≤‡∏ï‡∏∏‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 30 ‡∏ò‡∏≤‡∏ï‡∏∏
            const selectedElements = [...elements].sort(() => Math.random() - 0.5).slice(0, 14);
            
            selectedElements.forEach((element, index) => {
                const nameCard = document.createElement('div');
                nameCard.className = `drop-zone bg-gray-50 border-2 border-gray-200 rounded-lg p-3 text-center min-h-[60px] flex items-center justify-center bounce-in`;
                nameCard.style.animationDelay = `${(index + 10) * 0.1}s`;
                nameCard.dataset.name = element.name;
                nameCard.dataset.correctSymbol = element.symbol;
                nameCard.innerHTML = `
                    <div class="text-base font-medium text-gray-700">${element.name}</div>
                `;
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö drop
                nameCard.addEventListener('dragover', handleDragOver);
                nameCard.addEventListener('drop', handleDrop);
                nameCard.addEventListener('dragleave', handleDragLeave);
                
                namesContainer.appendChild(nameCard);
            });
        }

        // Drag and Drop handlers
        function handleDragStart(e) {
            draggedElement = e.target;
            e.target.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
        }

        function handleDragEnd(e) {
            e.target.classList.remove('dragging');
            draggedElement = null;
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            e.target.classList.add('drag-over');
        }

        function handleDragLeave(e) {
            e.target.classList.remove('drag-over');
        }

        function handleDrop(e) {
            e.preventDefault();
            e.target.classList.remove('drag-over');
            
            if (draggedElement && !isChecked) {
                const symbol = draggedElement.dataset.symbol;
                const targetName = e.target.dataset.name;
                
                // ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                Object.keys(gameAnswers).forEach(key => {
                    if (gameAnswers[key] === symbol) {
                        delete gameAnswers[key];
                    }
                });
                
                gameAnswers[targetName] = symbol;
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                const symbolClone = draggedElement.cloneNode(true);
                symbolClone.className = 'bg-gradient-to-br ' + draggedElement.className.split(' ').find(c => c.includes('from-')) + ' ' + draggedElement.className.split(' ').find(c => c.includes('to-')) + ' rounded-lg p-2 text-center shadow-md';
                symbolClone.draggable = false;
                symbolClone.innerHTML = `<div class="text-2xl font-bold text-white">${symbol}</div>`;
                
                e.target.innerHTML = '';
                e.target.appendChild(symbolClone);
                
                updateScoreRealTime();
            }
        }

        // Touch handlers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
        let touchStartPos = { x: 0, y: 0 };
        let touchElement = null;

        function handleTouchStart(e) {
            if (isChecked) return;
            touchElement = e.target;
            const touch = e.touches[0];
            touchStartPos = { x: touch.clientX, y: touch.clientY };
            touchElement.classList.add('dragging');
        }

        function handleTouchMove(e) {
            if (!touchElement || isChecked) return;
            e.preventDefault();
            
            const touch = e.touches[0];
            const elementUnderTouch = document.elementFromPoint(touch.clientX, touch.clientY);
            
            // ‡∏•‡∏ö drag-over ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å drop zone
            document.querySelectorAll('.drop-zone').forEach(zone => {
                zone.classList.remove('drag-over');
            });
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° drag-over ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ drop zone
            if (elementUnderTouch && elementUnderTouch.classList.contains('drop-zone')) {
                elementUnderTouch.classList.add('drag-over');
            }
        }

        function handleTouchEnd(e) {
            if (!touchElement || isChecked) return;
            
            const touch = e.changedTouches[0];
            const elementUnderTouch = document.elementFromPoint(touch.clientX, touch.clientY);
            
            touchElement.classList.remove('dragging');
            
            // ‡∏•‡∏ö drag-over ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å drop zone
            document.querySelectorAll('.drop-zone').forEach(zone => {
                zone.classList.remove('drag-over');
            });
            
            if (elementUnderTouch && elementUnderTouch.classList.contains('drop-zone')) {
                const symbol = touchElement.dataset.symbol;
                const targetName = elementUnderTouch.dataset.name;
                
                // ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                Object.keys(gameAnswers).forEach(key => {
                    if (gameAnswers[key] === symbol) {
                        delete gameAnswers[key];
                    }
                });
                
                gameAnswers[targetName] = symbol;
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                const symbolClone = touchElement.cloneNode(true);
                symbolClone.className = 'bg-gradient-to-br ' + touchElement.className.split(' ').find(c => c.includes('from-')) + ' ' + touchElement.className.split(' ').find(c => c.includes('to-')) + ' rounded-lg p-2 text-center shadow-md';
                symbolClone.draggable = false;
                symbolClone.innerHTML = `<div class="text-2xl font-bold text-white">${symbol}</div>`;
                
                elementUnderTouch.innerHTML = '';
                elementUnderTouch.appendChild(symbolClone);
                
                updateScoreRealTime();
            }
            
            touchElement = null;
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
        function updateScoreRealTime() {
            if (isChecked) return;
            
            let score = 0;
            Object.keys(gameAnswers).forEach(name => {
                const correctSymbol = elements.find(e => e.name === name)?.symbol;
                if (gameAnswers[name] === correctSymbol) {
                    score += 10;
                }
            });
            currentScore = score;
            updateScore();
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        function checkAnswers() {
            isChecked = true;
            
            document.querySelectorAll('.drop-zone').forEach(zone => {
                const name = zone.dataset.name;
                const correctSymbol = zone.dataset.correctSymbol;
                const userAnswer = gameAnswers[name];
                
                zone.classList.remove('correct', 'incorrect');
                
                if (userAnswer === correctSymbol) {
                    zone.classList.add('correct');
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå ‚úÖ
                    const checkMark = document.createElement('div');
                    checkMark.className = 'absolute top-2 right-2 text-2xl';
                    checkMark.innerHTML = '‚úÖ';
                    zone.style.position = 'relative';
                    zone.appendChild(checkMark);
                } else {
                    zone.classList.add('incorrect');
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå ‚ùå
                    const crossMark = document.createElement('div');
                    crossMark.className = 'absolute top-2 right-2 text-2xl';
                    crossMark.innerHTML = '‚ùå';
                    zone.style.position = 'relative';
                    zone.appendChild(crossMark);
                }
            });
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            setTimeout(() => {
                const totalQuestions = document.querySelectorAll('.drop-zone').length;
                const correctAnswers = Object.keys(gameAnswers).filter(name => {
                    const correctSymbol = elements.find(e => e.name === name)?.symbol;
                    return gameAnswers[name] === correctSymbol;
                }).length;
                
                const resultDiv = document.createElement('div');
                resultDiv.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
                resultDiv.innerHTML = `
                    <div class="bg-white rounded-2xl p-8 text-center shadow-2xl bounce-in">
                        <div class="text-6xl mb-4">${correctAnswers === totalQuestions ? 'üéâ' : 'üí™'}</div>
                        <h3 class="text-3xl font-bold mb-4 text-gray-800">
                            ${correctAnswers === totalQuestions ? '‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°!' : '‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!'}
                        </h3>
                        <p class="text-xl text-gray-600 mb-6">
                            ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å ${correctAnswers} ‡∏à‡∏≤‡∏Å ${totalQuestions} ‡∏Ç‡πâ‡∏≠<br>
                            ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${currentScore} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                        </p>
                        <button onclick="this.parentElement.parentElement.remove(); resetGame();" 
                                class="bg-gradient-to-r from-green-400 to-blue-500 hover:from-green-500 hover:to-blue-600 text-white px-8 py-3 rounded-xl font-semibold transition-all duration-300">
                            ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                        </button>
                    </div>
                `;
                document.body.appendChild(resultDiv);
            }, 1000);
        }

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏°
        function resetGame() {
            isChecked = false;
            initializeGame();
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        function updateScore() {
            document.getElementById('score').textContent = currentScore;
        }

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ
        showHomePage();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96e6a9f231604f52',t:'MTc1NTA3MTg3MC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
